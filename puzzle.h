/* Sudoku generator/solver library */

#ifndef _PUZZLE_H_
#define _PUZZLE_H_

#include <stdio.h>
#include "grid.h"


/* sudoku_read: Reads a sudoku puzzle from stdin.

The input can have the format:
1 2 3 4 5 6 7 8 9 
4 5 6 7 8 9 1 2 3
7 8 9 1 2 3 4 5 6
2 3 4 5 6 7 8 9 1 
5 6 7 8 9 1 2 3 4
8 9 1 2 3 4 5 6 7 
3 4 5 6 7 8 9 1 2
6 7 8 9 1 2 3 4 5 
9 1 2 3 4 5 6 7 8 

Between each value the allows characters are: space, CR, CRLF. Values 0
indicate empty cells and these can also be represented by a '.'

Parameters: void

Returns: a Grid_T type */
Grid_T sudoku_read(void);


/* sudoku_print

Writes a sudoku puzzle grid to stream. The format is
9 numbers per line and after a number there is a space. Each line is
terminated by LF.

Checks: if stream is NULL at runtime.

Parameters:
stream: stream to write to.
grid: a Grid_T type.

Returns: void */
void sudoku_print(FILE *stream, Grid_T grid);


/* sudoku_print_errors

Writes to stderr all errors of grid including:
    Errors related to numbers appearing twice in the same row/column/block.
    Errors related to empty cells.

Note that the number of available choices for each cell have been computed
when the function returns.

Parameters:
grid: a Grid_T type.

Returns: void */
void sudoku_print_errors(Grid_T grid);


/* sudoku_is_correct

Checks if grid is fully completed and does not violate any sudoku rule.
Note that the number of available choices for each cell have been computed when
the function returns.

Parameters:
grid: a Grid_T type.

Returns: 1 if there are no errors, 0 otherwise. */
int sudoku_is_correct(Grid_T grid);


/* sudoku_solve

Solves grid using recursion (backtracking method). If there is more than
one solution, it returns one of them. If there is no solution, it returns one
of the attempted solutions. If the puzzle violates a sudoku rule, it returns
the initial puzzle.

Parameters:
grid: a Grid_T type

Returns: a Grid_T type */
Grid_T sudoku_solve(Grid_T grid);


/* sudoku_solution_is_unique

Indicates whether grid has a unique choice solution. Should be used
on grids generated by sudoku_generate() and sudoku_solve() only.

Parameters:
grid: a Grid_T type

Returns:
1 if grid has a unique choice solution
0 if grid does not have a unique choice solution */
int sudoku_solution_is_unique(Grid_T grid);


/* sudoku_generate

Generates a random sudoku with nelts non-zero cells.

The following algorithm is used:
1) Generate a random fully completed puzzle.
2) Start clearing random cells and each time check whether the
puzzle has a unique choice solution.
3) If the puzzle does not have unique choice solution, try another cell.
4) If no matter what cell is chosen, the puzzle cannot have a unique
choice solution, continue clearing cells until the nelts non-zero
cells requirement is met.

We can find whether the returned puzzle has a unique choice solution by
calling sudoku_solution_is_unique() before solving the puzzle.

Parameters:
nelts: number of non-zero cells.

Returns: a Grid_T type */
Grid_T sudoku_generate(int nelts);


#endif